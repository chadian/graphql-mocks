schema {
  query: Query
}

type Query {
  hello: String,
  person(id: ID!): Person
  allPersons: [Person!]!
}

type Person {
  id: ID!
  name: String!
  age: Int!
  friends: [Person!]!
  posts: [Post!]!
  transportation: Transportation!
  hobbies: [Hobby!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  author: Person!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  body: String!
  author: Person!
}

union Transportation = Bike | PublicTransit | Car

type Bike {
  brand: String!
}

type PublicTransit {
  primary: PublicTransitOptions!
}

enum PublicTransitOptions {
  Bus
  Tram
  Subway
}

type Car {
  make: String!
  model: String!
}

interface Hobby {
  name: String!
  requiresEquipment: Boolean!
}

type SportsHobby implements Hobby {
  name: String!
  requiresEquipment: Boolean!
  hasMultiplePlayers: Boolean!
}

type CulinaryHobby implements Hobby {
  name: String!
  requiresEquipment: Boolean!
  requiresOven: Boolean!
  requiresStove: Boolean!
}

type MakerHobby implements Hobby {
  name: String!
  requiresEquipment: Boolean!
  makerType: MakerHobbyTypes!
}

enum MakerHobbyTypes {
  Textile
  Electronic
  Woodwork
}
